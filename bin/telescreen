#!/usr/bin/python3 -tt
# -*- coding: utf-8 -*-

# Use GObject-Introspection for the Gtk infrastructure bindings.
import gi

# Specify versions of the components we are going to use.
gi.require_version('GdkPixbuf', '2.0')
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
gi.require_version('Gst', '1.0')
gi.require_version('GstVideo', '1.0')
gi.require_version('GObject', '2.0')
gi.require_version('WebKit2', '4.0')

# Import the GObject-compatible Twisted reactor.
from twisted.internet import gireactor
gireactor.install(useGtk=True)
from twisted.internet import reactor

# Import GNOME platform libraries.
#
# FIXME: We do not pass nor update the argv since I don't know how to
#        meaningfully intergrate it with our own option handling.
#
from gi.repository import GObject
from gi.repository import Gtk
Gtk.init([])

from gi.repository import Gdk
Gdk.init([])

from gi.repository import Gst
Gst.init([])

from gi.repository.Gtk import Application

# Import all application handles.
from telescreen.decoder.server import Decoder
from telescreen.manager import Manager
from telescreen.screen import Screen
from telescreen.tzmq import Router
from telescreen.cec import CEC
from telescreen import common

# Get rest of the Twisted.
from twisted.python import log
from twisted.internet.stdio import StandardIO

# Command line arguments follow the GNU conventions.
from getopt import gnu_getopt
from sys import argv, stderr, exit


def do_screen(*args, connect_to, identity, quiet, enable_cec):
    if not quiet:
        # Start Twisted logging to console.
        log.startLogging(stderr)

    # Obtain the unique identity identifier.
    if identity is None:
        with open('/etc/machine-id') as fp:
            identity = fp.read().strip()

    # Prepare a 0MQ router instance for communication with the
    # leader that publishes our indoctrination schedule.
    router = Router(identity, default_recipient='leader')
    router.connect(connect_to)

    # Prepare the screen that is presented to the user.
    screen = Screen()

    if enable_cec:
        # Prepare the CEC adapter.
        cec = CEC()

    else:
        cec = None

    # Prepare the manager that communicates with the leader and
    # controls the screen instance above.
    manager = Manager(router, screen, cec)

    # Route 0MQ messages to the manager.
    router.on_message = manager.on_message

    # Schedule a call to the manager right after we finish here.
    reactor.callLater(0, manager.start)

    # Also draw the initial, blank screen as soon as possible.
    reactor.callLater(0, screen.start)

    # Run Gtk / Twisted reactor until the user terminates us.
    reactor.run()

def do_decode(*args, quiet, **kwargs):
    if not quiet:
        # Start Twisted logging to console.
        log.startLogging(stderr)

    assert len(args) == 3, 'Expected parameters: xid, media, url'

    # Parse decoding arguments.
    xid, media, url = args
    xid = int(xid)

    assert media in ('image', 'video', 'stream'), 'Expected media: image, video'

    # Prepare the decoder.
    decoder = Decoder(xid, media, url)

    # Allow decoder communicate with parent over stdio.
    StandardIO(decoder)

    # Run Gtk / Twisted reactor until the user terminates us or
    # decoder decides to stop.
    reactor.run()


def do_help(*args, **kwargs):
    print('Usage: telescreen [--connect=tcp://127.0.0.1:5001]')
    print('Run the telescreen with given configuration.')
    print('')
    print('OPTIONS:')
    print('  --help, -h             Display this help.')
    print('  --version, -V          Display version info.')
    print('')
    print('  --connect, -c url      Connect to specified 0MQ endpoint.')
    print('  --id, -D identity      Set client 0MQ identity.')
    print('  --cec, -C              Use cec-tool to control TV power.')
    print('  ')
    print('  --debug, -d            Dump 0MQ communication.')
    print('  --quiet, -q            Disable stderr logging, disable debug.')
    print('')
    print('The 0MQ endpoint must belong to an Indoktrinator instance')
    print('responding to messages addressed to the "leader".')
    print('')
    print('Report bugs at <http://github.com/techlib/telescreen/>.')


def do_version(*args, **kwargs):
    print('telescreen (NTK) 1')


def main():
    # Parse command line arguments.
    longopts = ['help', 'version', 'debug', 'id=', 'connect=',
                'decode', 'quiet', 'cec']
    opts, args = gnu_getopt(argv, 'hVdi:D:c:qC', longopts)

    action = do_screen
    kwargs = {
        'connect_to': None,
        'identity': None,
        'quiet': False,
        'enable_cec': False,
    }

    for k, v in opts:
        if k in ('--help', '-h'):
            action = do_help
        elif k in ('--version', '-V'):
            action = do_version
        elif k in ('--connect', '-c'):
            kwargs['connect_to'] = v
        elif k in ('--id', '-D'):
            kwargs['identity'] = v
        elif k in ('--decode',):
            action = do_decode
        elif k in ('--quiet', '-q'):
            kwargs['quiet'] = True
        elif k in ('--debug', '-d'):
            common.debug = True
        elif k in ('--cec', '-C'):
            kwargs['enable_cec'] = True

    if action != do_decode and kwargs['connect_to'] is None:
        kwargs['connect_to'] = 'tcp://127.0.0.1:5001'

    # Perform the selected action.
    action(*args[1:], **kwargs)


if __name__ == '__main__':
    main()

# vim:set sw=4 ts=4 et:
